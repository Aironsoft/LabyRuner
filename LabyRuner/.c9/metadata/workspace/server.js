{"changed":true,"filter":false,"title":"server.js","tooltip":"/server.js","value":"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\nvar http = require('http');\nvar path = require('path');\n\nvar async = require('async');\nvar socketio = require('socket.io');\nvar express = require('express');\n\n//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\nvar router = express();\nvar server = http.createServer(router);\nvar io = socketio.listen(server);\n\nrouter.use(express.static(path.resolve(__dirname, 'client')));\nvar messages = [];\nvar sockets = [];\n\n\nvar Labyquest = require('./models/Labyquest.js');//получение модели лабиринта\nvar Room = require('./models/Labyquest.js');//получение модели комнаты\nvar countGames = 0, countPlayers = [], Game = new Labyquest();\nGame.rooms = {};\nGame.users = [];\nGame.unfullRooms = {};\nGame.fullRooms = {};\nvar runes = [\"Fi\", \"Re\", \"Gu\", \"Ne\"];\n\n\n/////\n\nvar Point = function () // (rows, columns)\n{\n    this.X = -1;\n    this.Y = -1;\n}\n\nvar Point = function (x, y) // (rows, columns)\n{    \n    this.X = x;\n    this.Y = y;\n}\n\n\nvar Cell = function (is_blocked) {\n    this.is_blocked = is_blocked;\n    \n    this.north = false;\n    this.west = false;\n    this.south = false;\n    this.east = false;\n    \n    this.has_way = false;\n}\n\n\nvar mazeArray = function (rows, columns) {\n    var arr = new Array();\n    for (var i = 0; i < columns; i++) { //сначала задаются столбцы\n        arr[i] = new Array();\n        for (var j = 0; j < rows; j++) {\n            var cell = { is_blocked: false, north: false, west: false, south: false, east: false, has_way: false };\n            arr[i][j] = cell;\n        }\n    }\n    return arr;\n}\n\n\nvar GenerateMaze = function (rows, columns) {\n    \n    var thisPoint = new Point();\n    thisPoint.X = Math.round(Math.random() *( columns - 1));\n    thisPoint.Y = Math.round(Math.random() *( rows - 1));\n    //EventEmitter.call(this);// Инициализируем события\n    \n    var maze = mazeArray(rows, columns);\n    \n    \n    \n    /**\n     Выбор направления\n    **/\n\tthis.nextCourse = function (selectedPoint) {\n        var able_ways = new Array();\n        \n        if (selectedPoint.X > 0) {\n            if (!maze[selectedPoint.X - 1][selectedPoint.Y].has_way) //если через ячейку слева не проложен путь\n            {\n                able_ways.push(\"west\");\n            }\n        }\n        \n        if (selectedPoint.X < columns - 1) {\n            if (!maze[selectedPoint.X + 1][selectedPoint.Y].has_way) //если через ячейку справа не проложен путь\n            {\n                able_ways.push(\"east\");\n            }\n        }\n        \n        if (selectedPoint.Y > 0) {\n            if (!maze[selectedPoint.X][selectedPoint.Y - 1].has_way) //если через ячейку сверху не проложен путь\n            {\n                able_ways.push(\"north\");\n            }\n        }\n        \n        if (selectedPoint.Y < rows - 1) {\n            if (!maze[selectedPoint.X][selectedPoint.Y + 1].has_way) //если через ячейку снизу не проложен путь\n            {\n                able_ways.push(\"south\");\n            }\n        }\n        \n        if (able_ways.length > 0) {\n            var r = Math.round(Math.random() * (able_ways.length - 1));//выбор направления к следующей доступной ячейке\n            \n            return able_ways[r];//вернуть направление\n        }\n        else { //если нет доступных для выбора ячеек\n            return null;//\n        }\n    }\n\n    \n    var selectNewStartWay = 0;\n    /**\n     Поиск начала для новой ветки\n    **/\n    this.selectNewStart = function () {\n        var np = null;\n        switch (selectNewStartWay) {\n            case 0:\n                for (var i = 0; i < columns; i++) {\n                    for (var j = 0; j < rows; j++) {\n                        if (maze[i][j].has_way) { //если ячейка имеет путь\n                            if (this.nextCourse(new Point(i, j)) != null) {    //и свободные клетки по соседству                            \n                                np = new Point();\n                                np.X = i;\n                                np.Y = j;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 1:\n                break;\n            case 2:\n                break;\n            case 3:\n                break;\n        }\n        \n        return np;\n    }\n    \n    \n    /**\n     Переход к следующей точке по направлению\n    **/\n    this.goToNextPoint = function () {\n        switch (course) {\n            case 'west':\n                maze[thisPoint.X][thisPoint.Y].west = true; //прописывает в текущую, что движется на запад\n                thisPoint.X -= 1; //переход в следующую клетку (на запад)\n                maze[thisPoint.X][thisPoint.Y].east = true;//обратный путь\n                maze[thisPoint.X][thisPoint.Y].has_way = true; //указать, что клетка, в которую совершён переход, имеет путь\n                return;\n            case 'east':\n                maze[thisPoint.X][thisPoint.Y].east = true;\n                thisPoint.X += 1;\n                maze[thisPoint.X][thisPoint.Y].west = true;\n                maze[thisPoint.X][thisPoint.Y].has_way = true;\n                return;\n            case 'north':\n                maze[thisPoint.X][thisPoint.Y].north = true;\n                thisPoint.Y -= 1;\n                maze[thisPoint.X][thisPoint.Y].south = true;\n                maze[thisPoint.X][thisPoint.Y].has_way = true;\n                return;\n            case 'south':\n                maze[thisPoint.X][thisPoint.Y].south = true;\n                thisPoint.Y += 1;\n                maze[thisPoint.X][thisPoint.Y].north = true;\n                maze[thisPoint.X][thisPoint.Y].has_way = true;\n                return;\n        }\n    }\n    \n    \n    maze[thisPoint.X][thisPoint.Y].has_way = true;\n    \n    \n    while (thisPoint != null) {\n        \n        var course = this.nextCourse(thisPoint);\n        while (course != null) {\n            this.goToNextPoint();\n            course = this.nextCourse(thisPoint);\n        }\n        \n        thisPoint = this.selectNewStart();\n    }\n    \n    return maze;\n}\n\n\n/**\n Генерация массива позиций в лабиринте\n **/\nvar coordsArray = function (rows, columns) {\n    var arr = new Array();\n    for (var i = 0; i < columns; i++) { //сначала задаются столбцы\n        arr[i] = new Array();\n        for (var j = 0; j < rows; j++) {\n            arr[i][j] = null;\n        }\n    }\n    return arr;\n}\n\n\nvar Client = function (){\n    var client = {name: null, type: \"player\", life: 100, scores: 0, room: null, client: null, color: null, X: -1, Y: -1 };\n    return client;\n}\n\nvar ClientCopy = function (client) {\n    var copy = { name: client.name, type: client.type, life: client.life, scores: client.scores, room: client.room, color: client.color, X: client.X, Y: client.Y };\n    return copy;\n}\n\nvar GenerateObject = function () {\n    var r = Math.round(Math.random() *( runes.length - 1));\n    var rune = runes[r];\n    var object = {name: \"Руна\"+ (Math.round(Math.random() * 10000)), type: \"rune\", value: rune, color: null, X: -1, Y: -1 };\n    return object;\n}\n\nvar GenerateTeleports = function (rows, columns)\n{\n    var teleports = new Array();\n    \n    var teleportsCount=rows*columns/100;\n    if(teleportsCount<2)\n        teleportsCount=2;\n    \n    for(var i = 0; i < teleportsCount; i++)\n    {\n        var X = Math.round(Math.random() *( columns - 1));\n        var Y = Math.round(Math.random() *( rows - 1));\n        \n        var teleport = {name: \"Портал\"+ (Math.round(Math.random() * 10000)), type: \"portal\", color: null, X: X, Y: Y };\n    \n        teleports.push(teleport);\n    }\n    \n    return teleports;\n}\n\n\n//можно ли из данной ячейки переместиться в указанную сторону\nvar MayMove = function(cell, course)\n{\n    switch(course)\n    {\n        case \"n\":\n            if(cell.north)\n                return true;\n            break;\n        case \"w\":\n            if(cell.west)\n                return true;\n            break;\n        case \"s\":\n            if(cell.south)\n                return true;\n            break;\n        case \"e\":\n            if(cell.east)\n                return true;\n            break;\n    }\n    return false;\n}\n\n\n/////\n\n\n\nio.on('connection', function (socket) {\n    \n    if (Game.users === undefined)\n        Game.users = [];\n    else if (Game.users.indexOf(socket) == -1)//если такого игрока нет в списке\n        Game.users.push(socket);//добавляем нового игрока\n    \n    socket.on('req_room', function (client_name) { //от клиента пришёл запрос на присоединение к комнате\n        \n        var clnt = Client();\n        \n        // if(client_name!=null) {\n            clnt.name = client_name;\n        // }\n        // else {\n        //     clnt.name = 'Игрок_' + (Math.round(Math.random() * 10000));\n        // }\n        \n        clnt.color = '#' + (Math.random() * 0xFFFFFF << 0).toString(16);//создаётся случайный цвет для игрока\n        clnt.client = socket;\n        \n        socket.me = clnt;\n        \n        var room=null;//комната игрока\n        \n        //Game.start();\n        if (Game.incompleateRoom == null)  //если нет комнаты с недобором\n        {\n            var keys=Object.keys(Game.unfullRooms); //массив ключей словаря незаполненных комнат\n            var unfullRoomsCount=keys.length;//количество незаполненных комнат\n            if(unfullRoomsCount>0)\n            {\n                var r = Math.round(Math.random() * (unfullRoomsCount-1));//выбор идентификатора случайного ключа\n                room=Game.unfullRooms[keys[r]]; //выбор комнаты из списка незаполненных по случайному ключу\n            }\n            else //если незаполненных комнат нет\n            {\n                Game.incompleateRoom = new Room(\"комната\" + (Math.round(Math.random() * 10000)));\n                room=Game.incompleateRoom;\n            }\n        }\n        else //если есть незаполненная комната\n        {\n            room = Game.incompleateRoom;\n        }\n        \n        \n        room.addClient(socket);\n        socket.join(room.name);\n        Game.rooms[socket.id] = room;\n        socket.me.room = room.name;\n        \n        socket.emit('room', room.name);\n        \n        \n        console.log(\"client id=\" + socket.id + \"  incompleateRoom.name=\" + room.name);\n        \n        //если в неполной комнате заполнено минимальное количество мест\n        if (room.hasMinClients()) {\n            \n            if(room.isBuilded)//если комната построена  //room.hasFreePlace &&  в комнате остались свободные места и она\n            {\n                // лабиринт, позиции и объекты отправляются лишь данному клиенту\n                socket.emit('maze', room.Maze);\n                socket.emit('positions', room.Positions);\n                socket.emit('objects', room.ObjectDict);\n                // socket.emit('teleports', room.TeleportDict);\n                socket.emit('portals', room.Teleports);\n                \n                var x = Math.round(Math.random() * (room.Maze.length - 1));\n                var y = Math.round(Math.random() * (room.Maze[0].length - 1));\n                \n                while (room.Positions[x][y] != null) {\n                    x = Math.round(Math.random() * (room.Maze.length - 1));\n                    y = Math.round(Math.random() * (room.Maze[0].length - 1));\n                }\n\n                socket.me.X = x;\n                socket.me.Y = y;\n                \n                room.Positions[x][y] = ClientCopy(socket.me);//помещается в случайное место лабиринта\n                room.ObjectDict[socket.me.name] = ClientCopy(socket.me);//записывает игрока в словарь объектов\n                    \n                io.sockets.in(room.name).emit('spawn', ClientCopy(socket.me));//отправить это сообщение всем членам его комнаты (отправление данного игрока)\n                \n                return;\n            }\n            else //если комната не построена\n            {\n                io.sockets.in(room.name).emit('compleate_room', '');//послать всем участникам комнаты сообщение, что их комната заполнена\n                \n                if (room.Maze == null || room.Maze == undefined) {\n                    room.Maze = GenerateMaze(5, 5);//генерация лабиринта\n                    room.Positions = coordsArray(5, 5);//массив позиций в лабиринте\n                    console.log(\"Лабиринт создан\");\n                }\n                io.sockets.in(room.name).emit('maze', room.Maze);\n                \n                room.PlacesPos=coordsArray(5, 5);//массив позиций в лабиринте;\n                room.Teleports = GenerateTeleports(room.Maze.length, room.Maze[0].length);\n                for(var i=0; i<room.Teleports.length; i++)\n                {\n                    room.PlacesPos[room.Teleports[i].X][room.Teleports[i].Y]=room.Teleports[i]; //добавление телепортов в позиции мест\n                }\n                \n                console.log(\"Лабиринт передан\");\n    \n                for ( var key in room.clients) { //размещение клиентов\n                    var x = Math.round(Math.random() * (room.Maze.length - 1));\n                    var y = Math.round(Math.random() * (room.Maze[0].length - 1));\n    \n                    while (room.Positions[x][y] != null) {\n                        x = Math.round(Math.random() * (room.Maze.length - 1));\n                        y = Math.round(Math.random() * (room.Maze[0].length - 1));\n                    }\n    \n                    room.clients[key].me.X = x;\n                    room.clients[key].me.Y = y;\n                    \n                    room.Positions[x][y] = ClientCopy(room.clients[key].me);//помещается в случайное место лабиринта\n                    room.ObjectDict[room.clients[key].me.name] = ClientCopy(room.clients[key].me);//записывает игрока в словарь объектов\n                }\n                \n                io.sockets.in(room.name).emit('portals',  room.Teleports);\n                console.log(\"Порталы \" + room.Teleports + \" переданы\");\n    \n                io.sockets.in(room.name).emit('positions', room.Positions);\n                console.log(\"Позиции \" + room.Positions + \" переданы\");\n                \n                io.sockets.in(room.name).emit('objects', room.ObjectDict);\n                console.log(\"Объекты \" + room.ObjectDict + \" переданы\");\n                \n                room.isBuilded = true;//отметить, что комната построена\n                \n                Game.unfullRooms[room.name]=room;//поместить текущую комнату в список неполных\n                Game.incompleateRoom = null;//и отметить, что неполной комнаты нет\n            }\n            \n        }\n    });\n    \n    socket.on('move', function (data) {\n        \n        if (Game.rooms[socket.id] == undefined) //если комната не определена, то выйти\n        {\n            return;\n        }\n\n        var dx = 0, dy = 0;\n        \n        var obj = Game.rooms[socket.id].ObjectDict[data.name]; //объект, который движется\n        if (obj == undefined)\n            return;\n\n        switch (data.course) { \n            case \"w\":\n                dx = -1;\n                break;\n            case \"n\":\n                dy -= 1;\n                break;\n            case \"e\":\n                dx += 1;\n                break;\n            case \"s\":\n                dy += 1;\n                break;\n        }\n        console.log(\"dx = \" + dx);\n        \n        if(obj.X + dx>-1 && obj.X + dx<Game.rooms[socket.id].Maze.length && obj.Y + dy>-1 && obj.Y + dy<Game.rooms[socket.id].Maze[0].length)\n        {\n            if(MayMove(Game.rooms[socket.id].Maze[obj.X][obj.Y], data.course))  //если ячейка лабиринта имеет путь в указанную сторону и ход не выходит за пределы\n            {\n                if (Game.rooms[socket.id].Positions[obj.X + dx][obj.Y + dy] == null)\n                //если ячейка лабиринта, в которую запрашивается перемещение, пуста\n                {\n                    console.log(\"Место для движения \"+ data.course+\" свободно\");\n                    \n                    if( Game.rooms[socket.id].PlacesPos[obj.X+dx][obj.Y+dy]==null) //если следующая ячейка - это не место\n                    {\n                        console.log(\"moving \"+Game.rooms[socket.id].Positions[obj.X + dx][obj.Y + dy]);\n                        io.sockets.in(Game.rooms[socket.id].name).emit('moving', { name: data.name, dx: dx, dy: dy, aim: null, num: null }); //имя и вектор сдвига // { name: data.name, x: obj.X+ dx, y: obj.Y+dy });\n            \n                        console.log(\"obj.X=\"+ obj.X+\" obj.Y=\"+obj.Y);\n                        var posObj = Game.rooms[socket.id].Positions[obj.X][obj.Y];//старое значение объекта из старой позиции\n                        \n                        if(posObj==null)\n                            posObj=ClientCopy(obj);\n                        \n                        posObj.X = obj.X + dx;\n                        posObj.Y = obj.Y + dy;\n                        Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;\n                        Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;\n                        \n                        if(posObj!==obj)\n                        {\n                            obj.X += dx;\n                            obj.Y += dy;\n                        }\n                    }\n                    else //если следующая ячейка - это место\n                    {\n                        if(Game.rooms[socket.id].PlacesPos[obj.X+dx][obj.Y+dy].type==\"portal\") //если игрок сходил на портал\n                        {\n                            var portNum = Math.round(Math.random() * (Game.rooms[socket.id].Teleports.length-1));\n                            var aim=\"portal\";\n                            \n                            if(Game.rooms[socket.id].Teleports[portNum].X==obj.X+dx && Game.rooms[socket.id].Teleports[portNum].Y ==obj.Y+dy)\n                            {\n                                portNum=null;\n                                aim=null;\n                            }\n                            \n                            io.sockets.in(Game.rooms[socket.id].name).emit('moving', { name: data.name, dx: dx, dy: dy, aim: aim, num: portNum}); //имя и вектор \n                            console.log(\"portal \"+Game.rooms[socket.id].Positions[obj.X + dx][obj.Y + dy]);\n                            \n                            var posObj = Game.rooms[socket.id].Positions[obj.X][obj.Y];//старое значение объекта из старой позиции\n                            if(posObj==null)\n                                posObj=ClientCopy(obj);\n                            \n                            posObj.X = obj.X + dx;\n                            posObj.Y = obj.Y + dy;\n                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;\n                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;\n            \n                            obj.X += dx;\n                            obj.Y += dy;\n                        }\n                    }\n                }\n                else {\n                    var forwardObj = Game.rooms[socket.id].Positions[obj.X + dx][obj.Y + dy];//объект, стоящий на пути\n                    if(forwardObj.type==\"rune\") //если это руна мешает проходу\n                    {\n                        io.sockets.in(Game.rooms[socket.id].name).emit('moving', { name: data.name, dx: dx, dy: dy, aim: null, num: null }); //имя и вектор сдвига игрока\n                        \n                        delete Game.rooms[socket.id].ObjectDict[forwardObj.name];//удалить уничтожаемый объект из словаря объектов\n                        io.sockets.in(Game.rooms[socket.id].name).emit('destroy', forwardObj.name); //указать игрокам имя объекта для уничтожения\n            \n                        io.sockets.in(Game.rooms[socket.id].name).emit('score', { name: data.name, ds: 10 }); //на сколько изменилось количество очков игрока\n                        \n                        var posObj = Game.rooms[socket.id].Positions[obj.X][obj.Y];//старое значение объекта из старой позиции\n                        if(posObj!=null)\n                        {\n                            posObj.X = obj.X + dx;\n                            posObj.Y = obj.Y + dy;\n                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;\n                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;\n                \n                            obj.X += dx;\n                            obj.Y += dy;\n                        }\n                    }\n                    else\n                    {\n                        socket.emit('moving', { name: data.name, dx: 0, dy: 0 });//отправить клиенту нулевой шаг\n                        console.log(\"Место для движения \" + data.course + \" занято\");\n                        console.log(Game.rooms[socket.id].Positions[obj.X + dx][obj.Y + dy]);\n                        console.log(obj);\n                    }\n                }\n        \n            }\n            else\n            {\n                socket.emit('moving', { name: data.name, dx: 0, dy: 0 });//отправить клиенту нулевой шаг\n                console.log(\"Нет пути \" + Game.rooms[socket.id].Positions[obj.X][obj.Y] + \" \"+data.course);\n            }\n        }\n        else\n        {\n            socket.emit('moving', { name: data.name, dx: 0, dy: 0 });//отправить клиенту нулевой шаг\n            console.log(\"Шаг за пределы \" + obj.X+ ' '+obj.Y + \" \"+data.course);\n        }\n\n    });\n    \n    socket.on('portate', function (data) {\n        \n        if (Game.rooms[socket.id] == undefined) //если комната не определена, то выйти\n        {\n            return;\n        }\n        \n        var Obj = Game.rooms[socket.id].ObjectDict[data.name];\n        \n        var portal = Game.rooms[socket.id].Teleports[data.num];\n        \n        if(Obj.X!=portal.X || Obj.Y!=portal.Y)\n        {\n            //Game.rooms[socket.id].Positions[portal.X][portal.Y] = Obj;\n            Game.rooms[socket.id].Positions[Obj.X][Obj.Y] = null;\n            Obj.X = portal.X;\n            Obj.Y = portal.Y;\n            \n            Game.rooms[socket.id].Positions[Obj.X][Obj.Y]=ClientCopy(Obj);\n            \n            // Game.rooms[socket.id].Positions[portal.X][portal.Y] = Obj;\n            // Game.rooms[socket.id].Positions[Obj.X][Obj.Y] = null;\n            // Obj.X = portal.X;\n            // Obj.Y = portal.Y;\n            \n            // var posObj = Game.rooms[socket.id].Positions[Obj.X][Obj.Y];//старое значение объекта из старой позиции\n            // if(posObj!=null)\n            // {\n            //     posObj.X = portal.X;\n            //     posObj.Y = portal.Y;\n            //     Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;\n            //     Game.rooms[socket.id].Positions[Obj.X][Obj.Y] = null;\n    \n            //     Obj.X += portal.X;\n            //     Obj.Y += portal.Y;\n            // }\n            \n            io.sockets.in(Game.rooms[socket.id].name).emit('porting', { name: data.name, x: portal.X, y: portal.Y });\n            console.log(\"Porting \"+Obj.X +' '+Obj.Y);\n        }\n    });\n    \n    //для синхронизации положения объекта с сервером\n    socket.on('syncpos', function (data) {\n        \n        if (Game.rooms[socket.id] == undefined) //если комната не определена, то выйти\n        {\n            return;\n        }\n        \n        var syncObj = Game.rooms[socket.id].ObjectDict[data.name];\n        \n        if(syncObj.X!=data.x && syncObj.Y!=data.y)\n        {\n            Game.rooms[socket.id].Positions[syncObj.X][syncObj.Y] = null;\n            Game.rooms[socket.id].Positions[data.X][data.Y] = syncObj;\n            syncObj.X=data.X;\n            syncObj.Y=data.Y;\n        \n            io.sockets.in(Game.rooms[socket.id].name).emit('syncing', { name: data.name, x: data.X, y: data.Y });\n        }\n    });\n    \n    \n    socket.on('wantspawn', function () {//если от клиента пришло сообщение о необходимости что-нибудь создать\n        // if(Game.rooms[socket.id]==undefined)\n        //     return;\n    \n        // if(Game.rooms[socket.id].Maze==null)\n        //     return;\n    \n        // var maxX=Game.rooms[socket.id].Maze.length;\n        // var maxY=Game.rooms[socket.id].Maze[0].length;\n    \n        // var x = Math.round(Math.random() * (maxX - 1));\n        // var y = Math.round(Math.random() * (maxY - 1));\n        \n        // if (Game.rooms[socket.id].Positions[x][y] == null)\n        // {\n        //     var object = GenerateObject();\n        //     object.X=x;\n        //     object.Y=y;\n            \n        //     Game.rooms[socket.id].Positions[x][y]=object;\n        //     Game.rooms[socket.id].ObjectDict[object.name] = object;\n            \n        //     io.sockets.in(Game.rooms[socket.id].name).emit('spawn', object);//отправить это сообщение всем членам его комнаты\n        // }\n    });\n\n    socket.on('message', function (message) {//если от клиента пришло сообщение\n        try {\n            io.sockets.in(Game.rooms[socket.id].name).emit('message', message);//отправить это сообщение всем членам его комнаты\n          //  client.broadcast.emit('message', message); //отправить всем, кроме отправителя\n        }\n        catch (e) {\n            //если пользователь уходит, то удалить его из списка\n            userId = Game.users.indexOf(socket);\n            if (userId != -1)\n                delete Game.users[userId];\n\n            console.log(e);\n            socket.disconnect();\n        }\n    });\n    \n    socket.on('out', function (data) {//от клиента пришло сообщение о покидании комнаты\n        if(Game.rooms[socket.id]==undefined)\n            return;\n    \n        if(Game.rooms[socket.id].name==data.room) {\n            io.sockets.in(Game.rooms[socket.id].name).emit('destroy', data.name); //указать игрокам имя объекта для уничтожения\n            \n            var obj = Game.rooms[socket.id].ObjectDict[data.name];\n            if(obj!=undefined) {\n                Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;//удалить объект из массива позиций\n                delete Game.rooms[socket.id].ObjectDict[data.name];//удалить объект из словаря объектов\n                \n                if(obj.type==\"player\") {\n                    delete Game.rooms[socket.id].clients[socket.id];//удалить объект из списка клиентов в комнате\n                     \n                    if (!Game.rooms[socket.id].hasMinClients()) {  //если в неполной комнате не заполнено минимальное количество мест\n                        Game.incompleateRoom=Game.rooms[socket.id];\n                    }\n                }\n            }\n        }\n    });\n    \n    ////////////\n    \n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}\n\nserver.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});\n","undoManager":{"mark":99,"position":100,"stack":[[{"start":{"row":590,"column":12},"end":{"row":600,"column":25},"action":"insert","lines":["var posObj = Game.rooms[socket.id].Positions[obj.X][obj.Y];//старое значение объекта из старой позиции","                        if(posObj!=null)","                        {","                            posObj.X = obj.X + dx;","                            posObj.Y = obj.Y + dy;","                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;","                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;","                ","                            obj.X += dx;","                            obj.Y += dy;","                        }"],"id":2368}],[{"start":{"row":585,"column":12},"end":{"row":585,"column":15},"action":"insert","lines":["// "],"id":2369},{"start":{"row":586,"column":12},"end":{"row":586,"column":15},"action":"insert","lines":["// "]},{"start":{"row":587,"column":12},"end":{"row":587,"column":15},"action":"insert","lines":["// "]},{"start":{"row":588,"column":12},"end":{"row":588,"column":15},"action":"insert","lines":["// "]}],[{"start":{"row":591,"column":0},"end":{"row":591,"column":4},"action":"remove","lines":["    "],"id":2370},{"start":{"row":592,"column":0},"end":{"row":592,"column":4},"action":"remove","lines":["    "]},{"start":{"row":593,"column":0},"end":{"row":593,"column":4},"action":"remove","lines":["    "]},{"start":{"row":594,"column":0},"end":{"row":594,"column":4},"action":"remove","lines":["    "]},{"start":{"row":595,"column":0},"end":{"row":595,"column":4},"action":"remove","lines":["    "]},{"start":{"row":596,"column":0},"end":{"row":596,"column":4},"action":"remove","lines":["    "]},{"start":{"row":597,"column":0},"end":{"row":597,"column":4},"action":"remove","lines":["    "]},{"start":{"row":598,"column":0},"end":{"row":598,"column":4},"action":"remove","lines":["    "]},{"start":{"row":599,"column":0},"end":{"row":599,"column":4},"action":"remove","lines":["    "]},{"start":{"row":600,"column":0},"end":{"row":600,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":591,"column":0},"end":{"row":591,"column":4},"action":"remove","lines":["    "],"id":2371},{"start":{"row":592,"column":0},"end":{"row":592,"column":4},"action":"remove","lines":["    "]},{"start":{"row":593,"column":0},"end":{"row":593,"column":4},"action":"remove","lines":["    "]},{"start":{"row":594,"column":0},"end":{"row":594,"column":4},"action":"remove","lines":["    "]},{"start":{"row":595,"column":0},"end":{"row":595,"column":4},"action":"remove","lines":["    "]},{"start":{"row":596,"column":0},"end":{"row":596,"column":4},"action":"remove","lines":["    "]},{"start":{"row":597,"column":0},"end":{"row":597,"column":4},"action":"remove","lines":["    "]},{"start":{"row":598,"column":0},"end":{"row":598,"column":4},"action":"remove","lines":["    "]},{"start":{"row":599,"column":0},"end":{"row":599,"column":4},"action":"remove","lines":["    "]},{"start":{"row":600,"column":0},"end":{"row":600,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":591,"column":0},"end":{"row":591,"column":4},"action":"remove","lines":["    "],"id":2372},{"start":{"row":592,"column":0},"end":{"row":592,"column":4},"action":"remove","lines":["    "]},{"start":{"row":593,"column":0},"end":{"row":593,"column":4},"action":"remove","lines":["    "]},{"start":{"row":594,"column":0},"end":{"row":594,"column":4},"action":"remove","lines":["    "]},{"start":{"row":595,"column":0},"end":{"row":595,"column":4},"action":"remove","lines":["    "]},{"start":{"row":596,"column":0},"end":{"row":596,"column":4},"action":"remove","lines":["    "]},{"start":{"row":597,"column":0},"end":{"row":597,"column":4},"action":"remove","lines":["    "]},{"start":{"row":598,"column":0},"end":{"row":598,"column":4},"action":"remove","lines":["    "]},{"start":{"row":599,"column":0},"end":{"row":599,"column":4},"action":"remove","lines":["    "]},{"start":{"row":600,"column":0},"end":{"row":600,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":593,"column":27},"end":{"row":593,"column":30},"action":"remove","lines":["obj"],"id":2373},{"start":{"row":593,"column":27},"end":{"row":593,"column":30},"action":"insert","lines":["Obj"]}],[{"start":{"row":590,"column":57},"end":{"row":590,"column":60},"action":"remove","lines":["obj"],"id":2374},{"start":{"row":590,"column":57},"end":{"row":590,"column":60},"action":"insert","lines":["Obj"]}],[{"start":{"row":590,"column":64},"end":{"row":590,"column":67},"action":"remove","lines":["obj"],"id":2375},{"start":{"row":590,"column":64},"end":{"row":590,"column":67},"action":"insert","lines":["Obj"]}],[{"start":{"row":596,"column":48},"end":{"row":596,"column":51},"action":"remove","lines":["obj"],"id":2376},{"start":{"row":596,"column":48},"end":{"row":596,"column":51},"action":"insert","lines":["Obj"]}],[{"start":{"row":596,"column":55},"end":{"row":596,"column":58},"action":"remove","lines":["obj"],"id":2377},{"start":{"row":596,"column":55},"end":{"row":596,"column":58},"action":"insert","lines":["Obj"]}],[{"start":{"row":594,"column":27},"end":{"row":594,"column":30},"action":"remove","lines":["obj"],"id":2378},{"start":{"row":594,"column":27},"end":{"row":594,"column":30},"action":"insert","lines":["Obj"]}],[{"start":{"row":598,"column":16},"end":{"row":598,"column":19},"action":"remove","lines":["obj"],"id":2379},{"start":{"row":598,"column":16},"end":{"row":598,"column":19},"action":"insert","lines":["Obj"]}],[{"start":{"row":599,"column":16},"end":{"row":599,"column":19},"action":"remove","lines":["obj"],"id":2380},{"start":{"row":599,"column":16},"end":{"row":599,"column":19},"action":"insert","lines":["Obj"]}],[{"start":{"row":593,"column":27},"end":{"row":593,"column":37},"action":"remove","lines":["Obj.X + dx"],"id":2381},{"start":{"row":593,"column":27},"end":{"row":593,"column":35},"action":"insert","lines":["portal.X"]}],[{"start":{"row":594,"column":27},"end":{"row":594,"column":37},"action":"remove","lines":["Obj.Y + dy"],"id":2383},{"start":{"row":594,"column":27},"end":{"row":594,"column":35},"action":"insert","lines":["portal.Y"]}],[{"start":{"row":599,"column":25},"end":{"row":599,"column":27},"action":"remove","lines":["dy"],"id":2384},{"start":{"row":599,"column":25},"end":{"row":599,"column":33},"action":"insert","lines":["portal.Y"]}],[{"start":{"row":598,"column":25},"end":{"row":598,"column":27},"action":"remove","lines":["dx"],"id":2385},{"start":{"row":598,"column":25},"end":{"row":598,"column":33},"action":"insert","lines":["portal.X"]}],[{"start":{"row":492,"column":12},"end":{"row":493,"column":28},"action":"remove","lines":["","                            "],"id":2386}],[{"start":{"row":514,"column":28},"end":{"row":520,"column":40},"action":"remove","lines":["posObj.X = obj.X + dx;","                            posObj.Y = obj.Y + dy;","                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;","                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;","            ","                            obj.X += dx;","                            obj.Y += dy;"],"id":2387},{"start":{"row":514,"column":28},"end":{"row":523,"column":25},"action":"insert","lines":["if(posObj!=null)","                        {","                            posObj.X = obj.X + dx;","                            posObj.Y = obj.Y + dy;","                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;","                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;","            ","                            obj.X += dx;","                            obj.Y += dy;","                        }"]}],[{"start":{"row":515,"column":0},"end":{"row":515,"column":4},"action":"insert","lines":["    "],"id":2388},{"start":{"row":516,"column":0},"end":{"row":516,"column":4},"action":"insert","lines":["    "]},{"start":{"row":517,"column":0},"end":{"row":517,"column":4},"action":"insert","lines":["    "]},{"start":{"row":518,"column":0},"end":{"row":518,"column":4},"action":"insert","lines":["    "]},{"start":{"row":519,"column":0},"end":{"row":519,"column":4},"action":"insert","lines":["    "]},{"start":{"row":520,"column":0},"end":{"row":520,"column":4},"action":"insert","lines":["    "]},{"start":{"row":521,"column":0},"end":{"row":521,"column":4},"action":"insert","lines":["    "]},{"start":{"row":522,"column":0},"end":{"row":522,"column":4},"action":"insert","lines":["    "]},{"start":{"row":523,"column":0},"end":{"row":523,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":523,"column":29},"end":{"row":524,"column":0},"action":"insert","lines":["",""],"id":2389},{"start":{"row":524,"column":0},"end":{"row":524,"column":28},"action":"insert","lines":["                            "]}],[{"start":{"row":524,"column":28},"end":{"row":524,"column":29},"action":"insert","lines":["у"],"id":2390}],[{"start":{"row":524,"column":29},"end":{"row":524,"column":30},"action":"insert","lines":["д"],"id":2391}],[{"start":{"row":524,"column":30},"end":{"row":524,"column":31},"action":"insert","lines":["ы"],"id":2392}],[{"start":{"row":524,"column":31},"end":{"row":524,"column":32},"action":"insert","lines":["у"],"id":2393}],[{"start":{"row":514,"column":37},"end":{"row":514,"column":38},"action":"remove","lines":["!"],"id":2394},{"start":{"row":514,"column":37},"end":{"row":514,"column":38},"action":"insert","lines":["="]}],[{"start":{"row":514,"column":44},"end":{"row":515,"column":0},"action":"insert","lines":["",""],"id":2395},{"start":{"row":515,"column":0},"end":{"row":515,"column":28},"action":"insert","lines":["                            "]}],[{"start":{"row":515,"column":28},"end":{"row":515,"column":34},"action":"insert","lines":["posObj"],"id":2396}],[{"start":{"row":515,"column":34},"end":{"row":515,"column":35},"action":"insert","lines":["="],"id":2397}],[{"start":{"row":515,"column":35},"end":{"row":515,"column":36},"action":"insert","lines":["С"],"id":2398}],[{"start":{"row":524,"column":29},"end":{"row":525,"column":32},"action":"remove","lines":["","                            удыу"],"id":2399}],[{"start":{"row":515,"column":35},"end":{"row":515,"column":36},"action":"remove","lines":["С"],"id":2400},{"start":{"row":515,"column":35},"end":{"row":515,"column":45},"action":"insert","lines":["ClientCopy"]}],[{"start":{"row":515,"column":45},"end":{"row":515,"column":47},"action":"insert","lines":["()"],"id":2401}],[{"start":{"row":515,"column":46},"end":{"row":515,"column":47},"action":"insert","lines":["щ"],"id":2402}],[{"start":{"row":515,"column":47},"end":{"row":515,"column":48},"action":"insert","lines":["и"],"id":2403}],[{"start":{"row":515,"column":48},"end":{"row":515,"column":49},"action":"insert","lines":["о"],"id":2404}],[{"start":{"row":515,"column":48},"end":{"row":515,"column":49},"action":"remove","lines":["о"],"id":2405}],[{"start":{"row":515,"column":47},"end":{"row":515,"column":48},"action":"remove","lines":["и"],"id":2406}],[{"start":{"row":515,"column":46},"end":{"row":515,"column":47},"action":"remove","lines":["щ"],"id":2407}],[{"start":{"row":515,"column":46},"end":{"row":515,"column":47},"action":"insert","lines":["o"],"id":2408}],[{"start":{"row":515,"column":47},"end":{"row":515,"column":48},"action":"insert","lines":["b"],"id":2409}],[{"start":{"row":515,"column":48},"end":{"row":515,"column":49},"action":"insert","lines":["j"],"id":2410}],[{"start":{"row":515,"column":50},"end":{"row":515,"column":51},"action":"insert","lines":[";"],"id":2411}],[{"start":{"row":515,"column":28},"end":{"row":515,"column":32},"action":"insert","lines":["    "],"id":2412}],[{"start":{"row":516,"column":28},"end":{"row":516,"column":29},"action":"remove","lines":["{"],"id":2413}],[{"start":{"row":517,"column":0},"end":{"row":517,"column":4},"action":"remove","lines":["    "],"id":2414},{"start":{"row":518,"column":0},"end":{"row":518,"column":4},"action":"remove","lines":["    "]},{"start":{"row":519,"column":0},"end":{"row":519,"column":4},"action":"remove","lines":["    "]},{"start":{"row":520,"column":0},"end":{"row":520,"column":4},"action":"remove","lines":["    "]},{"start":{"row":521,"column":0},"end":{"row":521,"column":4},"action":"remove","lines":["    "]},{"start":{"row":522,"column":0},"end":{"row":522,"column":4},"action":"remove","lines":["    "]},{"start":{"row":523,"column":0},"end":{"row":523,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":523,"column":40},"end":{"row":524,"column":29},"action":"remove","lines":["","                            }"],"id":2415}],[{"start":{"row":486,"column":24},"end":{"row":495,"column":25},"action":"remove","lines":["if(posObj!=null)","                        {","                            posObj.X = obj.X + dx;","                            posObj.Y = obj.Y + dy;","                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;","                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;","            ","                            obj.X += dx;","                            obj.Y += dy;","                        }"],"id":2416},{"start":{"row":486,"column":24},"end":{"row":495,"column":40},"action":"insert","lines":["if(posObj==null)","                                posObj=ClientCopy(obj);","                            ","                            posObj.X = obj.X + dx;","                            posObj.Y = obj.Y + dy;","                            Game.rooms[socket.id].Positions[posObj.X][posObj.Y] = posObj;","                            Game.rooms[socket.id].Positions[obj.X][obj.Y] = null;","            ","                            obj.X += dx;","                            obj.Y += dy;"]}],[{"start":{"row":487,"column":0},"end":{"row":487,"column":4},"action":"remove","lines":["    "],"id":2417},{"start":{"row":488,"column":0},"end":{"row":488,"column":4},"action":"remove","lines":["    "]},{"start":{"row":489,"column":0},"end":{"row":489,"column":4},"action":"remove","lines":["    "]},{"start":{"row":490,"column":0},"end":{"row":490,"column":4},"action":"remove","lines":["    "]},{"start":{"row":491,"column":0},"end":{"row":491,"column":4},"action":"remove","lines":["    "]},{"start":{"row":492,"column":0},"end":{"row":492,"column":4},"action":"remove","lines":["    "]},{"start":{"row":493,"column":0},"end":{"row":493,"column":4},"action":"remove","lines":["    "]},{"start":{"row":494,"column":0},"end":{"row":494,"column":4},"action":"remove","lines":["    "]},{"start":{"row":495,"column":0},"end":{"row":495,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":486,"column":24},"end":{"row":487,"column":0},"action":"insert","lines":["",""],"id":2418},{"start":{"row":487,"column":0},"end":{"row":487,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":494,"column":8},"end":{"row":494,"column":12},"action":"insert","lines":["    "],"id":2419}],[{"start":{"row":494,"column":12},"end":{"row":494,"column":16},"action":"insert","lines":["    "],"id":2420}],[{"start":{"row":494,"column":16},"end":{"row":494,"column":20},"action":"insert","lines":["    "],"id":2421}],[{"start":{"row":494,"column":20},"end":{"row":494,"column":24},"action":"insert","lines":["    "],"id":2422}],[{"start":{"row":494,"column":24},"end":{"row":495,"column":0},"action":"insert","lines":["",""],"id":2423},{"start":{"row":495,"column":0},"end":{"row":495,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":495,"column":24},"end":{"row":495,"column":25},"action":"insert","lines":["i"],"id":2424}],[{"start":{"row":495,"column":25},"end":{"row":495,"column":26},"action":"insert","lines":["f"],"id":2425}],[{"start":{"row":495,"column":26},"end":{"row":495,"column":28},"action":"insert","lines":["()"],"id":2426}],[{"start":{"row":495,"column":27},"end":{"row":495,"column":33},"action":"insert","lines":["posObj"],"id":2427}],[{"start":{"row":495,"column":33},"end":{"row":495,"column":34},"action":"insert","lines":["!"],"id":2428}],[{"start":{"row":495,"column":34},"end":{"row":495,"column":35},"action":"insert","lines":["="],"id":2429}],[{"start":{"row":495,"column":35},"end":{"row":495,"column":36},"action":"insert","lines":["="],"id":2430}],[{"start":{"row":495,"column":36},"end":{"row":495,"column":39},"action":"insert","lines":["obj"],"id":2431}],[{"start":{"row":495,"column":40},"end":{"row":496,"column":0},"action":"insert","lines":["",""],"id":2432},{"start":{"row":496,"column":0},"end":{"row":496,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":496,"column":24},"end":{"row":496,"column":25},"action":"insert","lines":["{"],"id":2433}],[{"start":{"row":498,"column":36},"end":{"row":499,"column":0},"action":"insert","lines":["",""],"id":2434},{"start":{"row":499,"column":0},"end":{"row":499,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":499,"column":24},"end":{"row":499,"column":25},"action":"insert","lines":["}"],"id":2435}],[{"start":{"row":497,"column":0},"end":{"row":497,"column":4},"action":"insert","lines":["    "],"id":2436},{"start":{"row":498,"column":0},"end":{"row":498,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":495,"column":36},"end":{"row":495,"column":37},"action":"insert","lines":["="],"id":2437}],[{"start":{"row":495,"column":34},"end":{"row":495,"column":35},"action":"remove","lines":["="],"id":2438}],[{"start":{"row":573,"column":47},"end":{"row":573,"column":48},"action":"insert","lines":["."],"id":2439}],[{"start":{"row":573,"column":48},"end":{"row":573,"column":49},"action":"insert","lines":["X"],"id":2440}],[{"start":{"row":573,"column":49},"end":{"row":573,"column":50},"action":"insert","lines":["+"],"id":2441}],[{"start":{"row":573,"column":50},"end":{"row":573,"column":51},"action":"insert","lines":[" "],"id":2442}],[{"start":{"row":573,"column":51},"end":{"row":573,"column":53},"action":"insert","lines":["''"],"id":2443}],[{"start":{"row":573,"column":52},"end":{"row":573,"column":53},"action":"insert","lines":[" "],"id":2444}],[{"start":{"row":573,"column":54},"end":{"row":573,"column":55},"action":"insert","lines":["+"],"id":2445}],[{"start":{"row":573,"column":55},"end":{"row":573,"column":56},"action":"insert","lines":["o"],"id":2446}],[{"start":{"row":573,"column":56},"end":{"row":573,"column":57},"action":"insert","lines":["b"],"id":2447}],[{"start":{"row":573,"column":55},"end":{"row":573,"column":57},"action":"remove","lines":["ob"],"id":2448},{"start":{"row":573,"column":55},"end":{"row":573,"column":58},"action":"insert","lines":["obj"]}],[{"start":{"row":573,"column":58},"end":{"row":573,"column":59},"action":"insert","lines":["."],"id":2449}],[{"start":{"row":573,"column":59},"end":{"row":573,"column":60},"action":"insert","lines":["Y"],"id":2450}],[{"start":{"row":596,"column":12},"end":{"row":596,"column":15},"action":"insert","lines":["// "],"id":2451},{"start":{"row":597,"column":12},"end":{"row":597,"column":15},"action":"insert","lines":["// "]},{"start":{"row":598,"column":12},"end":{"row":598,"column":15},"action":"insert","lines":["// "]},{"start":{"row":599,"column":12},"end":{"row":599,"column":15},"action":"insert","lines":["// "]},{"start":{"row":600,"column":12},"end":{"row":600,"column":15},"action":"insert","lines":["// "]},{"start":{"row":601,"column":12},"end":{"row":601,"column":15},"action":"insert","lines":["// "]},{"start":{"row":602,"column":12},"end":{"row":602,"column":15},"action":"insert","lines":["// "]},{"start":{"row":604,"column":12},"end":{"row":604,"column":15},"action":"insert","lines":["// "]},{"start":{"row":605,"column":12},"end":{"row":605,"column":15},"action":"insert","lines":["// "]},{"start":{"row":606,"column":12},"end":{"row":606,"column":15},"action":"insert","lines":["// "]}],[{"start":{"row":591,"column":12},"end":{"row":591,"column":15},"action":"remove","lines":["// "],"id":2453},{"start":{"row":592,"column":12},"end":{"row":592,"column":15},"action":"remove","lines":["// "]},{"start":{"row":593,"column":12},"end":{"row":593,"column":15},"action":"remove","lines":["// "]},{"start":{"row":594,"column":12},"end":{"row":594,"column":15},"action":"remove","lines":["// "]}],[{"start":{"row":594,"column":29},"end":{"row":595,"column":0},"action":"insert","lines":["",""],"id":2454},{"start":{"row":595,"column":0},"end":{"row":595,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":595,"column":12},"end":{"row":596,"column":0},"action":"insert","lines":["",""],"id":2455},{"start":{"row":596,"column":0},"end":{"row":596,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":596,"column":12},"end":{"row":599,"column":29},"action":"insert","lines":["Game.rooms[socket.id].Positions[portal.X][portal.Y] = Obj;","            Game.rooms[socket.id].Positions[Obj.X][Obj.Y] = null;","            Obj.X = portal.X;","            Obj.Y = portal.Y;"],"id":2456}],[{"start":{"row":596,"column":12},"end":{"row":596,"column":15},"action":"insert","lines":["// "],"id":2457},{"start":{"row":597,"column":12},"end":{"row":597,"column":15},"action":"insert","lines":["// "]},{"start":{"row":598,"column":12},"end":{"row":598,"column":15},"action":"insert","lines":["// "]},{"start":{"row":599,"column":12},"end":{"row":599,"column":15},"action":"insert","lines":["// "]}],[{"start":{"row":594,"column":29},"end":{"row":595,"column":0},"action":"insert","lines":["",""],"id":2458},{"start":{"row":595,"column":0},"end":{"row":595,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":595,"column":12},"end":{"row":596,"column":0},"action":"insert","lines":["",""],"id":2459},{"start":{"row":596,"column":0},"end":{"row":596,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":596,"column":12},"end":{"row":596,"column":69},"action":"insert","lines":["ar posObj = Game.rooms[socket.id].Positions[Obj.X][Obj.Y]"],"id":2460}],[{"start":{"row":596,"column":12},"end":{"row":596,"column":13},"action":"insert","lines":["v"],"id":2461}],[{"start":{"row":596,"column":12},"end":{"row":596,"column":25},"action":"remove","lines":["var posObj = "],"id":2462}],[{"start":{"row":596,"column":57},"end":{"row":596,"column":58},"action":"insert","lines":["="],"id":2463}],[{"start":{"row":596,"column":58},"end":{"row":596,"column":59},"action":"insert","lines":["C"],"id":2464}],[{"start":{"row":596,"column":59},"end":{"row":596,"column":60},"action":"insert","lines":["l"],"id":2465}],[{"start":{"row":596,"column":58},"end":{"row":596,"column":60},"action":"remove","lines":["Cl"],"id":2466},{"start":{"row":596,"column":58},"end":{"row":596,"column":70},"action":"insert","lines":["ClientCopy()"]}],[{"start":{"row":596,"column":69},"end":{"row":596,"column":72},"action":"insert","lines":["Obj"],"id":2467}],[{"start":{"row":591,"column":12},"end":{"row":591,"column":13},"action":"insert","lines":["/"],"id":2468}],[{"start":{"row":591,"column":13},"end":{"row":591,"column":14},"action":"insert","lines":["/"],"id":2469}],[{"start":{"row":596,"column":73},"end":{"row":596,"column":74},"action":"insert","lines":[";"],"id":2471}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":8144,"scrollleft":0,"selection":{"start":{"row":596,"column":74},"end":{"row":596,"column":74},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":580,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1458823751956}